---
description: 
globs: 
alwaysApply: true
---

# Regras para Firebase Realtime Database

## Configuração e Inicialização
- **Inicialização:** Inicialize o Firebase app de forma centralizada (ex: `src/services/firebase.js`).
- **Credenciais:** A configuração do Firebase (apiKey, authDomain, databaseURL, etc.) deve vir de variáveis de ambiente (`.env`).

## Interação com o Banco de Dados
- **SDK:** Utilize o SDK oficial do Firebase para JavaScript (v9+ com API modular).
- **Estrutura de Dados:** Siga rigorosamente a estrutura definida no arquivo `firebase_rtdb_structure.md` (a ser criado). Qualquer alteração na estrutura deve ser refletida lá.
- **Referências:** Use referências (`ref`) específicas e bem definidas para acessar os nós do banco de dados.
- **Operações:** Utilize as funções modulares (`get`, `set`, `update`, `push`, `remove`, `onValue`) de forma apropriada.
- **Leituras:** Use `onValue` para escutar mudanças em tempo real (ex: chat, estado da campanha). Use `get` para leituras pontuais.
- **Escritas:** Use `set` para sobrescrever dados, `update` para atualizações parciais e `push` para listas (como histórico de chat).
- **Segurança:** Embora a autenticação e regras mais complexas sejam gerenciadas pelo Firebase e pelo usuário final, estruture as queries e escritas pensando em segurança. Evite buscar ou escrever dados desnecessários.
- **Otimização:** Evite aninhamento excessivo de dados. Desnormalize dados quando fizer sentido para otimizar leituras. Use queries (orderByChild, equalTo, etc.) quando aplicável, mas lembre-se das limitações do RTDB.
- **Tratamento de Erros:** Implemente tratamento de erros adequado para todas as operações de banco de dados (try/catch, .catch()).

## Organização do Código
- **Serviços:** Encapsule a lógica de interação com o Firebase em serviços dedicados (ex: `campaignService.js`, `characterService.js`).
- **Hooks:** Crie hooks customizados (ex: `useCampaignData`, `useChatMessages`) para abstrair a lógica de busca e atualização de dados nos componentes.
