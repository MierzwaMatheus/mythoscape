---
type: Auto Attached
description: Regras específicas para interação com a API do Google AI (LLM).
patterns: ["src/services/aiService.js", "src/hooks/useAIResponse.js"]
---

# Regras para Google AI (LLM) API

## Configuração e Autenticação
- **API Key:** A chave da API do Google AI (Gemini ou similar) será fornecida pelo usuário final. A aplicação deve permitir que o usuário configure sua chave de forma segura (ex: input no frontend, armazenada localmente ou em configuração de conta no Firebase, mas **nunca** versionada no código).
- **SDK/HTTP:** Utilize o SDK oficial do Google AI para JavaScript, se disponível e adequado. Caso contrário, faça chamadas HTTP diretas para a API REST, seguindo a documentação oficial.

## Interação com a API
- **Prompt:** Construa o prompt dinamicamente, utilizando:
    - O prompt base definido em `prompt_mestre_ia.txt` (a ser criado).
    - O histórico relevante da conversa/jogo.
    - Dados contextuais específicos buscados do Firebase RTDB (conforme definido em `firebase_rtdb_structure.md`).
    - A entrada mais recente do usuário (comando, mensagem de chat).
- **Formato da Requisição:** Siga o formato esperado pela API do Google (ex: estrutura JSON com `contents`, `role`, `parts`, etc.).
- **Parâmetros:** Configure parâmetros como `temperature`, `maxOutputTokens`, etc., de forma apropriada para a tarefa de Mestre de RPG, permitindo alguma criatividade mas mantendo a coerência.
- **Tratamento da Resposta:** Processe a resposta da API, extraindo o conteúdo relevante gerado pela IA.

## Fluxo de Dados (Mestre de IA)
1.  Receber input do usuário (chat/comando).
2.  Analisar o input para determinar a intenção e quais dados contextuais são necessários.
3.  Buscar os dados relevantes do Firebase RTDB (estado da campanha, ficha do personagem, histórico, etc.).
4.  Construir o prompt completo para a API do Google AI.
5.  Enviar a requisição para a API.
6.  Receber a resposta da IA.
7.  Analisar a resposta: identificar novas informações, atualizações de estado, descrições, etc.
8.  Atualizar o Firebase RTDB com as novas informações geradas pela IA.
9.  (O frontend, escutando o RTDB, exibirá a resposta/atualização para o usuário).

## Boas Práticas e Segurança
- **Tratamento de Erros:** Implemente tratamento robusto para erros da API (ex: chave inválida, cota excedida, erro de servidor, conteúdo bloqueado). Forneça feedback útil ao usuário.
- **Segurança da Chave:** Reitere a importância de o usuário manter sua chave API segura. A aplicação não deve expor a chave desnecessariamente.
- **Otimização:** Evite chamadas redundantes à API. Utilize o contexto do Firebase eficientemente para minimizar o tamanho do prompt quando possível, sem perder informações cruciais.
- **Abstração:** Encapsule a lógica de interação com a API em um serviço dedicado (ex: `aiService.js`).
